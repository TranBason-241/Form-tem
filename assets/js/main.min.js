$(document).ready(function () {
  // get province
  async function fetchAsync(url) {
    let response = await fetch(url);
    let data = await response.json();
    return data;
  }
  fetchAsync("https://provinces.open-api.vn/api/").then((data) => {
    if (data) {
      let ul = document.querySelector(".px-dropdown-panel ul");
      for (const province of data) {
        const li = document.createElement("li");
        const content = document.createTextNode(province?.name);
        li.setAttribute("value", province?.name);
        li.appendChild(content);
        ul.appendChild(li);
      }
      initpXDropdown();
    }
  });

  // check to checkbox to view more answer
  const checkbox = document.getElementById("more-ans-check-box");
  checkbox.addEventListener("change", (event) => {
    const input = document.getElementById("more-ans-input");
    if (event.currentTarget.checked) {
      if (canChecked(event.currentTarget)) {
        input.removeAttribute("disabled");
        input.focus();
        input.select();
        input.classList.add("more-ans-input-line");
      }
    } else {
      input.setAttribute("disabled", "");

      input.value = "";
      input.classList.remove("more-ans-input-line");
    }
  });

  // Xử lí max and min select option
  let listAllCheckBoxOnPage = document.querySelectorAll(
    "input[type='checkbox']"
  );
  for (var i = 0; i < listAllCheckBoxOnPage.length; i++) {
    listAllCheckBoxOnPage[i].addEventListener("change", (event) => {
      //Check group của thằng này (thừa thiếu )
      if (event.target.checked) {
        if (!canChecked(event.target)) {
          event.target.checked = false;
        }
      }
    });
  }
});

//Check group của thằng checkbox đủ select chưa (get cha nó rồi ra đếm con)
let canChecked = (inputEle) => {
  // get parent
  formGroup = inputEle.closest(".form-group");
  listCheckBox = formGroup.querySelectorAll("input[type='checkbox']");
  let count = 0;
  let max = formGroup.getAttribute("numberSelected");
  for (const input of listCheckBox) {
    if (input.checked) {
      count++;
    }
  }
  if (count <= max) {
    return true;
  } else {
    console.log("kodc");
    return false;
  }
};

// js trên Selecte input trên mạng
// src https://codepen.io/mftaskin/pen/qBoGgdZ
const initpXDropdown = () => {
  const dropdownElements = document.querySelectorAll(".px-dropdown");
  window.addEventListener("click", () => {
    dropdownElements.forEach((item) => {
      item.classList.remove("active");
    });
  });
  dropdownElements.forEach((item) => {
    const dropdownValue = item.querySelector(".px-dropdown-value");
    const dropdownInput = item.querySelector(".px-dropdown-input");
    const dropdownPanelOptions = item.querySelectorAll(
      ".px-dropdown-panel ul li"
    );
    dropdownInput.addEventListener("click", (event) => {
      event.stopPropagation();
      item.classList.toggle("active");
    });
    dropdownPanelOptions.forEach((dropdownPanelOptionItem) => {
      dropdownPanelOptionItem.addEventListener("click", () => {
        dropdownInput.querySelector("input").value =
          dropdownPanelOptionItem.innerHTML;
        dropdownValue.value =
          dropdownPanelOptionItem.getAttribute("data-value");
      });
    });
  });
};

// initpXDropdown();

function Validator(formSelector) {
  // get parent
  var getParent = (currentElement, selector) => {
    // Nếu cha gần nhất ko phải element cần tìm thì tìm ra ngoài tiếp

    while (currentElement.parentElement) {
      if (currentElement.parentElement.matches(selector)) {
        return currentElement.parentElement;
      }
      currentElement = currentElement.parentElement;
    }
  };

  var formElement = document.querySelector(formSelector);

  // ------------------- Input và Select bình thường ----------------------
  // form rules la nhung rule se duoc xai trong form khi form khai bao
  var formRules = {};

  //Khai bao san cac function handle validation
  var validatiorRules = {
    required: function (value) {
      // return value ? undefined : "vui long nhap";
      return value == "" ? "vui long nhap" : undefined;
    },
    email: (value) => {
      var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
      return regex.test(value) ? undefined : "email k hop le";
    },
    min: (min) => {
      return function (value) {
        return value.length >= min ? undefined : `min is ${min}`;
      };
    },
    phone: (value) => {
      var regex = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
      return regex.test(value) ? undefined : "phone k hop le";
    },
  };
  if (formElement) {
    // get all input
    var inputs = formElement.querySelectorAll("[name][rules]");

    // create rules
    // not pass => return message
    // pass => undefined

    // get rules to object
    for (var input of inputs) {
      var rules = input.getAttribute("rules").split("|");
      var ruleInfo;
      for (var rule of rules) {
        var isRulehasValue = rule.includes(":");
        if (isRulehasValue) {
          ruleInfo = rule.split(":");
          rule = ruleInfo[0];
        }
        var ruleFunction = validatiorRules[rule];
        if (isRulehasValue) {
          ruleFunction = validatiorRules[rule](ruleInfo[1]);
        }
        // console.log(rule);
        if (Array.isArray(formRules[input.name])) {
          formRules[input.name].push(ruleFunction);
        } else {
          formRules[input.name] = [ruleFunction];
        }
      }

      // lang nghe su kien de validate (blur,change)
      input.onblur = handleValidate;
      // Khi đã báo lỗi và bấm dô nhập thì xóa đi nào blur mới check lại
      input.oninput = handleClearError;
    }
  }
  // ham thuc hien validate
  function handleValidate(event) {
    setTimeout(() => {
      var rules = formRules[event.target.name];
      var errorMessage = "";

      for (var rule of rules) {
        console.log(event.target.value);
        errorMessage = rule(event.target.value);
        if (errorMessage) break;
      }
      // neu co loi thi hien thi ra
      if (errorMessage) {
        console.log(errorMessage);
        // laays thang cha
        var formGroup = getParent(event.target, ".form-group");
        // tim thang con
        if (formGroup) {
          // add class invalid zo cai formGroup  de xu li gi ẩn hiện thằng span lỗi
          formGroup.classList.add("invalid");
          var messageElement = formGroup.querySelector(".form-message");
          if (messageElement) {
            messageElement.innerText = errorMessage;
          }
        }
      }
      return !errorMessage;
    }, 0);
  }

  function handleClearError(event) {
    var formGroup = getParent(event.target, ".form-group");
    if (formGroup.classList.contains("invalid")) {
      formGroup.classList.remove("invalid");
      var messageElement = formGroup.querySelector(".form-message");
      if (messageElement) {
        messageElement.innerText = "";
      }
    }
  }

  // ----------------- Radio group -------------------------

  // get all radio group
  let radioGroup = formElement.querySelectorAll("[name][groupRadioRules]");

  // hàm check required

  const checkAllGroupRadio = () => {
    let isCheckedAll = true;
    for (const group of radioGroup) {
      if (!checkRequired(group)) {
        isCheckedAll = false;
      }
    }
    return isCheckedAll;
  };

  const checkRequired = (group) => {
    let value = group.querySelector(
      `input[name="${group.getAttribute("name")}"]:checked`
    )?.value;

    if (value) {
      // Da click
      return true;
    } else {
      // Chua click, ban thong bao ra (Radio)
      return false;
    }
  };

  // ----------------- checkbox group -------------------------

  // get all checkbox group
  let checkboxGroup = formElement.querySelectorAll(
    "[name][groupCheckboxRules]"
  );

  // hàm check required

  const checkAllGroupCheckbox = () => {
    let isCheckedAll = true;
    for (const group of checkboxGroup) {
      if (!checkRequiredCheckBox(group, group.getAttribute("numberSelected"))) {
        isCheckedAll = false;
      }
    }
    return isCheckedAll;
  };

  const checkRequiredCheckBox = (group, numberSelected) => {
    // list mayas cái đã được check
    let listChecked = group.querySelectorAll(
      `input[name="${group.getAttribute("name")}"]:checked`
    );
    if (listChecked.length > 0) {
      // Da click
      return true;
    } else {
      // Chua click, ban thong bao ra (check box)
      return false;
    }
  };

  // xử lí hành vi submit form
  formElement.onsubmit = function (event) {
    event.preventDefault();

    let isValid = true;

    // input bt + select
    var inputs = formElement.querySelectorAll("[name][rules]");

    for (var input of inputs) {
      if (!handleValidate({ target: input })) {
        isValid = false;
      }
    }

    // group radio
    isValid = checkAllGroupRadio();
    // group checkbox
    isValid = checkAllGroupCheckbox();
    //input && select

    if (isValid) {
      // formElement.submit();
      console.log("trueeeeeeeeeeeeeeeeeeeeeeee");
      sendPostRequest();
    } else {
      console.log("false");
      // alert("combobox fail");
    }
  };

  const sendPostRequest = async () => {
    var bodyFormData = new FormData();

    //get data radio
    // + get all radio group
    let radioGroups = formElement.querySelectorAll("[name][groupRadioRules]");
    for (const radioGroup of radioGroups) {
      pNode = radioGroup.querySelector(".question");
      let value = radioGroup.querySelector(
        `input[name="${radioGroup.getAttribute("name")}"]:checked`
      )?.value;

      bodyFormData.append(`data[${pNode.innerText}]`, value);
    }
    //get checkbox
    //  + get all checkbox group
    let checkboxGroups = formElement.querySelectorAll(
      "[name][groupCheckboxRules]"
    );

    for (const checkboxGroup of checkboxGroups) {
      let value = "";
      pNode = checkboxGroup.querySelector(".question");
      //get data cua checkbox
      listChecked = checkboxGroup.querySelectorAll(
        `input[name="${checkboxGroup.getAttribute("name")}"]:checked`
      );
      for (const checked of listChecked) {
        if (checked.value != "more-ans") {
          value += `-${checked.value}\n`;
        } else {
          //get data input more-ans
          let input_more_ans = checkboxGroup.querySelector(".more-ans-input");
          value += `-${input_more_ans.value}\n`;
        }
      }

      bodyFormData.append(`data[${pNode.innerText}]`, value);
    }
    //get input and select
    // get all input
    var inputs = formElement.querySelectorAll("[name][rules]");
    // console.log(inputs);
    for (const input of inputs) {
      // Đầu tiên tìm form-group trước thì mới tìm được <p></p> vì là cha chung
      let form_group = input.closest(".form-group");
      let pNode = form_group.querySelector(".question");
      console.log(pNode.innerText);
      let value = input.value;
      bodyFormData.append(`data[${pNode.innerText}]`, value);
    }

    var bodyFormData2 = new FormData();
    var data = {
      "field 1": 123,
      field_2: 456,
      field_3: 446,
    };
    bodyFormData2.append("field_1", "123");

    for (var pair of bodyFormData.entries()) {
      console.log(pair[0] + ", " + pair[1]);
    }

    //  use validate
    postData(
      "https://script.google.com/macros/s/AKfycbwzTJW5_Whr3aXl7NGuLV4cQNxPrg-yQ-QKUQx5s4gMwVLe_IT3IMAYeBlAR7C3rw8o/exec",
      data
    );
  };
}

// api post data
async function postData(url, data) {
  axios({
    method: "POST",
    url,
    data: data,
    headers: {
      "Content-Type": "multipart/form-data;",
    },
  })
    .then(function (response) {
      //handle success
      if (response.status === 201 || response.status === 200) {
        alert("ok");
        console.log("ok");
      } else {
        // not ok
      }
    })
    .catch(function (response) {
      //handle error
      console.log(response);
    });
}
